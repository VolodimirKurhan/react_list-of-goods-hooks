{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","default","sortBy","setSortBy","isReversed","setIsReversed","visibleGoods","goods","reverse","preparedGoods","sort","good1","good2","alphabet","localeCompare","length","getPreparedGoods","handleSortClick","type","className","cn","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,4EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,oBAAAA,E,gBAAAA,E,YAAAA,M,KAmCE,IAAME,EAAgB,WAC3B,MAA4BC,mBAAmBH,EAASI,SAAxD,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAhCR,SACEC,EACAL,EACAM,GAEA,IAAMC,EAAa,YAAOF,GAiB1B,OAfIL,GACFO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKL,EAASgB,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKf,EAASkB,OACZ,OAAOJ,EAAMI,OAASH,EAAMG,OAE9B,QACE,OAAO,MAKXP,EACKC,EAAcD,UAGhBC,EAMcO,CAAiBlB,EAAiBI,EAAQE,GAO/D,IAAMa,EAAkB,SAACC,GAAD,OAAoB,WAC1Cf,EAAUe,KAOZ,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACED,KAAK,SACLC,UAAWC,IACT,SAAU,UAAW,CAAE,WAAYlB,IAAWL,EAASgB,WAEzDQ,QAASJ,EAAgBpB,EAASgB,UALpC,iCAUA,wBACEK,KAAK,SACLC,UAAWC,IACT,SAAU,aAAc,CAAE,WAAYlB,IAAWL,EAASkB,SAE5DM,QAASJ,EAAgBpB,EAASkB,QALpC,4BAUA,wBACEG,KAAK,SACLC,UAAWC,IACT,SAAU,aAAc,CAAE,YAAahB,IAEzCiB,QAhCmB,WACzBhB,GAAc,SAAAiB,GAAI,OAAKA,MA0BnB,sBAUEpB,GAAUE,IACV,wBACEc,KAAK,SACLC,UAAU,4BACVE,QAlDV,WACElB,EAAUN,EAASI,SACnBI,GAAc,IA6CR,sBAUJ,6BACE,6BACGC,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,cCpHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4f1417ef.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport cn from 'classnames';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  alphabet = 'alphabet',\n  length = 'length',\n  default = '',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortBy: SortType,\n  reverse: boolean,\n): string[] {\n  const preparedGoods = [...goods];\n\n  if (sortBy) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortBy) {\n        case SortType.alphabet:\n          return good1.localeCompare(good2);\n\n        case SortType.length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortBy, setSortBy] = useState<SortType>(SortType.default);\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortBy, isReversed);\n\n  function reset() {\n    setSortBy(SortType.default);\n    setIsReversed(false);\n  }\n\n  const handleSortClick = (type: SortType) => (): void => {\n    setSortBy(type);\n  };\n\n  const handleReverseClick = () => {\n    setIsReversed(prev => !prev);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button', 'is-info', { 'is-light': sortBy !== SortType.alphabet },\n          )}\n          onClick={handleSortClick(SortType.alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button', 'is-success', { 'is-light': sortBy !== SortType.length },\n          )}\n          onClick={handleSortClick(SortType.length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button', 'is-warning', { 'is-light': !isReversed },\n          )}\n          onClick={handleReverseClick}\n        >\n          Reverse\n        </button>\n\n        {(sortBy || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => (\n            <li\n              key={good}\n              data-cy=\"Good\"\n            >\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}